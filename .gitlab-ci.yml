stages:
  - build_xml
  - deploy_gitlab
  - build_html
  - deploy_github

# generate XML with Doxygen
generate-xml:
  stage: build_xml
  image: alpine
  script:
    # add Doxygen and git
    - apk update
    - apk add doxygen git
    # clone evalhyd core C++ library
    - git clone https://gitlab.irstea.fr/HYCAR-Hydro/evalhyd/evalhyd.git
    # generate XML for C++ API with Doxygen
    - mkdir -p __build/xml/cpp
    - (cd __source/cpp && doxygen Doxyfile-gitlab)
  artifacts:
    paths:
      - __build/xml/
    expire_in: 1 hour

# generate HTML with Sphinx and deploy
pages:
  stage: deploy_gitlab
  image: python:3.9.13
  script:
    # install required packages to build docs
    - python -m pip install -r requirements.txt
    # generate docs with Sphinx
    - sphinx-build -b html __source public
  dependencies:
    - generate-xml
  artifacts:
    paths:
      - public

# generate HTML with Sphinx
generate-html:
  stage: build_html
  image: python:3.9.13
  script:
    # install required packages to build docs
    - python -m pip install -r requirements.txt
    # generate docs with Sphinx
    - sphinx-build -b html __source tmp_html
  dependencies:
    - generate-xml
  artifacts:
    paths:
      - tmp_html/

# generate HTML with Sphinx
git-commit:
  stage: deploy_github
  image: ubuntu
  script:
    # based on https://gitlab.com/gitlab-examples/ssh-private-key/-/blob/master/.gitlab-ci.yml

    # install ssh-agent if not already installed
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    # run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    # add the SSH private key stored in CI/CD variable to the agent store
    - echo "$SSH_PRIVATE_KEY_EVALHYD_GITHUB" | tr -d '\r' | ssh-add -
    # create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # use ssh-keyscan to scan the keys of GitHub's server
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # clone evalhyd git repository on GitHub
    - git clone git@github.com:hydroGR/evalhyd.git html

    # configure user details
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_ID"

    # copy locally build docs into git repository
    - \cp -rf ./tmp_html/. ./html/

    # commit changes and push to GitHub remote
    - cd html
    - git add --all
    - git commit -m "update html"
    - git push origin main
  dependencies:
    - generate-html
